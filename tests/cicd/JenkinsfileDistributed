pipeline {
    agent {
        label 'sr613'
    }
    stages {
        stage('Prepare') {
            steps {
                script {
                    def labels = ['sr608', 'sr613']
                    def builders = [: ]
                    for (x in labels) {
                        def label = x
                        builders[label] = {
                            node(label) {
                                cleanWs()
                                checkout scm
                                sh 'cd Dockerfile-ubuntu18.04 && docker build -t e2eaiok-tensorflow . -f DockerfileTensorflow && docker build -t e2eaiok-pytorch . -f DockerfilePytorch && docker build -t e2eaiok-pytorch112 . -f DockerfilePytorch112 && cd .. && yes | docker container prune && yes | docker image prune'
                            }
                        }
                    }
                    parallel builders
                }
            }
        }
        stage('Run docker worker') {
            agent { 
                label 'sr608'
            }
            steps {
                sh 'cd modelzoo/bert && bash patch_bert.sh && cd ../..'
                sh 'cd modelzoo/rnnt/pytorch && bash patch_rnnt.sh && cd ../../..'
                sh 'cd modelzoo/resnet  && bash patch_resnet.sh && cd ../..'
                sh 'cd modelzoo/WnD/TensorFlow2 && bash patch_wnd.sh && cd ../../..'
                sh 'cd modelzoo/dlrm && bash patch_dlrm.sh && cd ../..'
                sh 'if [[ $(docker ps -q --filter "name=worker-e2eaiok-*" | wc -l) -ne 0 ]]; then docker ps -q --filter "name=worker-e2eaiok-*" | grep -q . && docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q); fi'
                sh 'docker run -t -d --name worker-e2eaiok-tensorflow --privileged --network host --device=/dev/dri -v /root/.ssh:/root/.ssh -v /mnt/DP_disk1/dataset:/home/vmagent/app/dataset -v `pwd`:/home/vmagent/app/e2eaiok -w /home/vmagent/app/ e2eaiok-tensorflow /bin/bash && docker exec -d worker-e2eaiok-tensorflow /bin/bash service ssh start'
                sh 'docker run -t -d --name worker-e2eaiok-pytorch --privileged --network host --device=/dev/dri -v /root/.ssh:/root/.ssh -v /mnt/DP_disk1/dataset:/home/vmagent/app/dataset -v `pwd`:/home/vmagent/app/e2eaiok -w /home/vmagent/app/ e2eaiok-pytorch /bin/bash && docker exec -d worker-e2eaiok-pytorch /bin/bash service ssh start'
                sh 'docker run -t -d --name worker-e2eaiok-pytorch112 --privileged --network host --device=/dev/dri -v /root/.ssh:/root/.ssh -v /mnt/DP_disk1/dataset:/home/vmagent/app/dataset -v `pwd`:/home/vmagent/app/e2eaiok -w /home/vmagent/app/ e2eaiok-pytorch112 /bin/bash && docker exec -d worker-e2eaiok-pytorch112 /bin/bash service ssh start'
            }
        }
        stage('Run distributed bert') {
            steps {
                sh '> /root/.ssh/known_hosts'
                sh 'pwd && cd modelzoo/bert && bash patch_bert.sh && cd ../..'
                sh 'docker run --rm --name test-workload-dist-bert --privileged --network host --device=/dev/dri -v /root/.ssh:/root/.ssh -v /root/cicd_logs:/home/vmagent/app/cicd_logs -v /mnt/DP_disk1/dataset:/home/vmagent/app/dataset -v `pwd`:/home/vmagent/app/e2eaiok -w /home/vmagent/app/ e2eaiok-tensorflow /bin/bash -c "SIGOPT_API_TOKEN=$SIGOPT_API_TOKEN USE_SIGOPT=$USE_SIGOPT . /home/vmagent/app/e2eaiok/tests/cicd/jenkins_bert_test_dist.sh"'
            }
        }
        stage('Run distributed rnnt') {
            steps {
                sh '> /root/.ssh/known_hosts'
                sh 'pwd && cd modelzoo/rnnt/pytorch && bash patch_rnnt.sh && cd ../../..'
                sh 'docker run --rm --name test-workload-dist-rnnt --privileged --network host --device=/dev/dri -v /root/.ssh:/root/.ssh -v /root/cicd_logs:/home/vmagent/app/cicd_logs -v /mnt/DP_disk1/dataset:/home/vmagent/app/dataset -v `pwd`:/home/vmagent/app/e2eaiok -w /home/vmagent/app/ e2eaiok-pytorch112 /bin/bash -c "SIGOPT_API_TOKEN=$SIGOPT_API_TOKEN USE_SIGOPT=$USE_SIGOPT . /home/vmagent/app/e2eaiok/tests/cicd/jenkins_rnnt_test_dist.sh"'
            }
        }
        stage('Run distributed resnet') {
            steps {
                sh '> /root/.ssh/known_hosts'
                sh 'pwd && cd modelzoo/resnet  && bash patch_resnet.sh && cd ../..'
                sh 'docker run --rm --name test-workload-dist-resnet --privileged --network host --device=/dev/dri -v /root/.ssh:/root/.ssh -v /root/cicd_logs:/home/vmagent/app/cicd_logs -v /mnt/DP_disk1/dataset:/home/vmagent/app/dataset -v `pwd`:/home/vmagent/app/e2eaiok -w /home/vmagent/app/ e2eaiok-tensorflow /bin/bash -c "SIGOPT_API_TOKEN=$SIGOPT_API_TOKEN USE_SIGOPT=$USE_SIGOPT . /home/vmagent/app/e2eaiok/tests/cicd/jenkins_resnet_test_dist.sh"'
            }
        }
        stage('Run distributed wnd') {
            steps {
                sh '> /root/.ssh/known_hosts'
                sh 'cd modelzoo/WnD/TensorFlow2 && bash patch_wnd.sh && cd ../../..'
                sh 'docker run --rm --name test-workload-dist-wnd --privileged --network host --device=/dev/dri -v /root/.ssh:/root/.ssh -v /root/cicd_logs:/home/vmagent/app/cicd_logs -v /mnt/DP_disk1/dataset:/home/vmagent/app/dataset -v `pwd`:/home/vmagent/app/e2eaiok -w /home/vmagent/app/ e2eaiok-tensorflow /bin/bash -c "SIGOPT_API_TOKEN=$SIGOPT_API_TOKEN USE_SIGOPT=$USE_SIGOPT . /home/vmagent/app/e2eaiok/tests/cicd/jenkins_wnd_test_dist.sh"'
            }
        }
        stage('Run distributed dlrm') {
            steps {
                sh '> /root/.ssh/known_hosts'
                sh 'cd modelzoo/dlrm && bash patch_dlrm.sh && cd ../..'
                sh 'docker run --rm --name test-workload-dist-dlrm --privileged --network host --device=/dev/dri -v /root/.ssh:/root/.ssh -v /root/cicd_logs:/home/vmagent/app/cicd_logs -v /mnt/DP_disk1/dataset:/home/vmagent/app/dataset -v `pwd`:/home/vmagent/app/e2eaiok -w /home/vmagent/app/ e2eaiok-pytorch /bin/bash -c "SIGOPT_API_TOKEN=$SIGOPT_API_TOKEN USE_SIGOPT=$USE_SIGOPT . /home/vmagent/app/e2eaiok/tests/cicd/jenkins_dlrm_test_dist.sh"'
            }
        }
        stage('Prepare minigo') {
            steps {
                sh 'cd modelzoo/minigo && bash patch_minigo.sh && cd ../.. '
                sh '/bin/bash tests/cicd/jenkins_minigo_test_prepare.sh'
            }
        }
        stage('Run distributed minigo') {
            agent { 
                label 'sr608'
            }
            steps {
                sh 'cd modelzoo/minigo && bash patch_minigo.sh && cd ../.. '
                sh 'SIGOPT_API_TOKEN=$SIGOPT_API_TOKEN USE_SIGOPT=$USE_SIGOPT /bin/bash tests/cicd/jenkins_minigo_test_dist.sh'
            }
        }
        stage('Stop docker worker') {
            agent { 
                label 'sr608'
            }
            steps {
                sh 'if [[ $(docker ps -q --filter "name=worker-e2eaiok-*" | wc -l) -ne 0 ]]; then docker ps -q --filter "name=worker-e2eaiok-*" | grep -q . && docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q); fi'
            }
        }
    }
    post {
        always {
            echo 'One way or another, I have finished'
            deleteDir()
            sh 'if [[ $(docker ps -q --filter "name=test-workload-dist-*" | wc -l) -ne 0 ]]; then docker ps -q --filter "name=test-workload-dist-*" | grep -q . && docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q); fi'
        }
        success {
            echo 'I succeeded!'
        }
        unstable {
            echo 'I am unstable :/'
        }
        failure {
            echo 'I failed :('
        }
        changed {
            echo 'Things were different before...'
        }
    }
}